name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  API_TOKEN: ${{ secrets.API_TOKEN }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      run: |
        pytest --cov=main --cov=security --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run Safety check for known vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-validate:
    name: Build and Validate
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate application startup
      run: |
        python -c "import main; print('Application imports successfully')"
    
    - name: Test API endpoints
      run: |
        # Start the application in background
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        APP_PID=$!
        
        # Wait for application to start
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test extract endpoint with authentication
        curl -f -X POST "http://localhost:8000/extract" \
          -H "Authorization: Bearer your-secret-token-here" \
          -H "Content-Type: application/json" \
          -d '{"url": "https://docs.google.com/spreadsheets/d/12itafHpvKAvPWUWl9XWtNJfG9T4kMw0sxqz9MFv0Xdk/edit?gid=1058109381"}' || exit 1
        
        # Stop the application
        kill $APP_PID
    
    - name: Create deployment artifact
      run: |
        # Create a clean deployment package
        mkdir -p deployment
        cp main.py deployment/
        cp security.py deployment/
        cp requirements.txt deployment/
        cp vercel.json deployment/ 2>/dev/null || echo "vercel.json not found, will be created in deployment phase"
        
        # Create deployment info
        echo "Build Date: $(date)" > deployment/build-info.txt
        echo "Git Commit: ${{ github.sha }}" >> deployment/build-info.txt
        echo "Git Branch: ${{ github.ref_name }}" >> deployment/build-info.txt
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/

